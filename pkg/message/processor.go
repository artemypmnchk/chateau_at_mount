package message

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"
)

// WebhookData –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—Ö–æ–¥—è—â–∏—Ö webhook –¥–∞–Ω–Ω—ã—Ö
type WebhookData struct {
	Event     string                 `json:"event"`
	Timestamp time.Time              `json:"timestamp"`
	Data      map[string]interface{} `json:"data"`
	Source    string                 `json:"source"`
}

// Processor –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
type Processor struct{}

// NewProcessor —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
func NewProcessor() *Processor {
	return &Processor{}
}

// ProcessWebhook –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–π webhook –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
func (p *Processor) ProcessWebhook(rawData []byte) (string, error) {
	// –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	var webhookData WebhookData
	if err := json.Unmarshal(rawData, &webhookData); err == nil {
		return p.formatStructuredMessage(webhookData), nil
	}

	// –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø–æ–ø—Ä–æ–±—É–µ–º –∫–∞–∫ JSON –æ–±—ä–µ–∫—Ç
	var jsonData map[string]interface{}
	if err := json.Unmarshal(rawData, &jsonData); err == nil {
		return p.formatJSONMessage(jsonData), nil
	}

	// –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ, –æ—Ç–ø—Ä–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å
	return p.formatRawMessage(string(rawData)), nil
}

// formatStructuredMessage —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (p *Processor) formatStructuredMessage(data WebhookData) string {
	var builder strings.Builder

	builder.WriteString("üîî **–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ**\n\n")
	
	if data.Source != "" {
		builder.WriteString(fmt.Sprintf("**–ò—Å—Ç–æ—á–Ω–∏–∫:** %s\n", data.Source))
	}
	
	if data.Event != "" {
		builder.WriteString(fmt.Sprintf("**–°–æ–±—ã—Ç–∏–µ:** %s\n", data.Event))
	}
	
	if !data.Timestamp.IsZero() {
		builder.WriteString(fmt.Sprintf("**–í—Ä–µ–º—è:** %s\n", data.Timestamp.Format("2006-01-02 15:04:05")))
	}

	if len(data.Data) > 0 {
		builder.WriteString("\n**–î–∞–Ω–Ω—ã–µ:**\n")
		for key, value := range data.Data {
			builder.WriteString(fmt.Sprintf("‚Ä¢ **%s:** %v\n", key, value))
		}
	}

	return builder.String()
}

// formatJSONMessage —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π JSON
func (p *Processor) formatJSONMessage(data map[string]interface{}) string {
	var builder strings.Builder

	builder.WriteString("üì¶ **Webhook –¥–∞–Ω–Ω—ã–µ**\n\n")

	for key, value := range data {
		// –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ–±—â–∏—Ö –ø–æ–ª–µ–π
		switch key {
		case "event", "type", "action":
			builder.WriteString(fmt.Sprintf("**–°–æ–±—ã—Ç–∏–µ:** %v\n", value))
		case "timestamp", "time", "created_at":
			builder.WriteString(fmt.Sprintf("**–í—Ä–µ–º—è:** %v\n", value))
		case "user", "username", "author":
			builder.WriteString(fmt.Sprintf("**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** %v\n", value))
		case "message", "description", "text":
			builder.WriteString(fmt.Sprintf("**–°–æ–æ–±—â–µ–Ω–∏–µ:** %v\n", value))
		default:
			builder.WriteString(fmt.Sprintf("**%s:** %v\n", key, value))
		}
	}

	return builder.String()
}

// formatRawMessage —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
func (p *Processor) formatRawMessage(data string) string {
	return fmt.Sprintf("üìù **–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ webhook**\n\n```\n%s\n```", data)
}

// CreateCustomMessage —Å–æ–∑–¥–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (p *Processor) CreateCustomMessage(title, content string) string {
	return fmt.Sprintf("‚ÑπÔ∏è **%s**\n\n%s", title, content)
}

// CreateErrorMessage —Å–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
func (p *Processor) CreateErrorMessage(err error) string {
	return fmt.Sprintf("‚ùå **–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook**\n\n```\n%s\n```", err.Error())
}

// CreateSuccessMessage —Å–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
func (p *Processor) CreateSuccessMessage(operation string) string {
	return fmt.Sprintf("‚úÖ **–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ**\n\n%s", operation)
} 